{"version":3,"sources":["pages/order/ calendar.js","pages/order/index.js"],"names":["dateCellRender","value","listData","date","type","content","getListData","className","map","item","key","status","text","monthCellRender","num","month","getMonthData","state","moment","selectedValue","onSelect","setState","onPanelChange","this","message","format","Component","tabList","tab","contentList","tab1","tab2","order","noTitleKey","onTabChange","style","width","title","extra","activeTabKey"],"mappings":"6QAyBA,SAASA,EAAeC,GACtB,IAAMC,EApBR,SAAqBD,GACnB,IAAIC,EACJ,OAAQD,EAAME,QACZ,KAAK,EACHD,EAAW,CACT,CAAEE,KAAM,UAAWC,QAAS,uBAE9B,MACA,KAAK,GACLH,EAAW,CACT,CAAEE,KAAM,UAAWC,QAAS,uBAKlC,OAAOH,GAAY,GAKFI,CAAYL,GAC7B,OACE,wBAAIM,UAAU,UACXL,EAASM,KAAI,SAAAC,GAAI,OAChB,wBAAIC,IAAKD,EAAKJ,SACZ,uBAAOM,OAAQF,EAAKL,KAAMQ,KAAMH,EAAKJ,eAc/C,SAASQ,EAAgBZ,GACvB,IAAMa,EARR,SAAsBb,GACpB,GAAsB,IAAlBA,EAAMc,QACR,MAAO,iCAMGC,CAAaf,GACzB,OAAOa,EACL,yBAAKP,UAAU,eACb,iCAAUO,GACV,iEAEA,K,iNAGJG,MAAQ,CACNhB,MAAOiB,MACPC,cAAeD,O,EAEjBE,SAAW,SAAAnB,GACT,EAAKoB,SAAS,CACZpB,QACAkB,cAAelB,K,EAInBqB,cAAgB,SAAArB,GACd,EAAKoB,SAAS,CAAEpB,W,wEAER,IAAD,EAC0BsB,KAAKN,MAA9BhB,EADD,EACCA,MAAOkB,EADR,EACQA,cACf,OACE,6BACA,uBACEK,QAAO,oCAAWL,GAAiBA,EAAcM,OAAO,iBAE1D,uBAAUxB,MAAOA,EAAOmB,SAAUG,KAAKH,SACvCE,cAAeC,KAAKD,cACpBtB,eAAgBA,EAChBa,gBAAiBA,S,GAzBOa,a,wCCnD9B,IAAMC,EAAU,CACd,CACEjB,IAAK,OACLkB,IAAK,gBAEP,CACElB,IAAK,OACLkB,IAAK,SAIHC,EAAc,CAClBC,KAAM,kBAAC,EAAD,MACNC,KAAM,wCAGaC,E,2MACnBf,MAAQ,CACNP,IAAK,OACLuB,WAAY,O,EAGdC,YAAc,SAACxB,EAAKN,GAClB,EAAKiB,SAAL,eAAiBjB,EAAOM,K,wEAEhB,IAAD,OACP,OACE,uBACIyB,MAAO,CAAEC,MAAO,QAChBC,MAAM,2BACNC,MAAO,eACPX,QAASA,EACTY,aAAchB,KAAKN,MAAMP,IACzBwB,YAAa,SAAAxB,GACX,EAAKwB,YAAYxB,EAAK,SAGvBmB,EAAYN,KAAKN,MAAMP,U,GArBCgB","file":"static/js/19.0cf153e5.chunk.js","sourcesContent":["\nimport React, { Component } from 'react'\nimport moment from 'moment';\nimport { Calendar, Badge,Alert, } from 'antd';\n\n// 提醒事件数据集合\nfunction getListData(value) {\n  let listData;\n  switch (value.date()) {\n    case 8:\n      listData = [\n        { type: 'success', content: '生日！' },\n      ];\n      break;\n      case 20:\n      listData = [\n        { type: 'warning', content: '打卡！' },\n      ];\n      break;\n    default:\n  }\n  return listData || [];\n}\n\n// 渲染提醒事件\nfunction dateCellRender(value) {\n  const listData = getListData(value);\n  return (\n    <ul className=\"events\">\n      {listData.map(item => (\n        <li key={item.content}>\n          <Badge status={item.type} text={item.content} />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nfunction getMonthData(value) {\n  if (value.month() === 8) {\n    return '追加的内容';\n  }\n}\n\n// 自定义渲染月单元格，返回内容会被追加到单元格\nfunction monthCellRender(value) {\n  const num = getMonthData(value);\n  return num ? (\n    <div className=\"notes-month\">\n      <section>{num}</section>\n      <span>追加的内容</span>\n    </div>\n  ) : null;\n}\nexport default class  extends Component {\n  state = {\n    value: moment(),\n    selectedValue: moment(),\n  };\n  onSelect = value => {\n    this.setState({\n      value,\n      selectedValue: value,\n    });\n  };\n\n  onPanelChange = value => {\n    this.setState({ value });\n  };\n  render() {\n    const { value, selectedValue } = this.state;\n    return (\n      <div>\n      <Alert\n        message={`你选择了: ${selectedValue && selectedValue.format('YYYY-MM-DD')}`}\n      />\n      <Calendar value={value} onSelect={this.onSelect} \n      onPanelChange={this.onPanelChange} \n      dateCellRender={dateCellRender}\n      monthCellRender={monthCellRender} />\n    </div>\n    );\n  }\n}\n\n","import React, { Component } from 'react';\nimport { Card } from 'antd';\nimport Calendar from './ calendar'\nconst tabList = [\n  {\n    key: 'tab1',\n    tab: '日历',\n  },\n  {\n    key: 'tab2',\n    tab: 'tab2',\n  },\n];\n\nconst contentList = {\n  tab1: <Calendar/>,\n  tab2: <p>content2</p>,\n};\n\nexport default class order extends Component {\n  state = {\n    key: 'tab1',\n    noTitleKey: 'app',\n  };\n\n  onTabChange = (key, type) => {\n    this.setState({ [type]: key });\n  };\n  render() {\n    return (\n      <Card\n          style={{ width: '100%' }}\n          title='测试页面'\n          extra={'预留'}\n          tabList={tabList}\n          activeTabKey={this.state.key}\n          onTabChange={key => {\n            this.onTabChange(key, 'key');\n          }}\n        >\n          {contentList[this.state.key]}\n        </Card>\n    );\n  }\n}"],"sourceRoot":""}